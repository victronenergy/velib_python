import gobject
import logging
import os
import requests
import sys
import subprocess
import traceback
import fcntl

# Victron packages
AppDir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(1, os.path.join(AppDir, 'ext', 'velib_python'))
from logger import setup_logging
from ve_utils import get_vrm_portal_id, exit_on_error

VrmApiServer = 'https://ccgxlogging.victronenergy.com'
CaBundlePath = os.path.join(AppDir, 'venus-ca.crt')
VrmBroker = 'mqtt.victronenergy.com'
SettingsPath = os.environ.get('DBUS_MQTT_PATH') or '/data/conf/mosquitto.d'
BridgeConfigPath = os.path.join(SettingsPath, 'vrm_bridge.conf')
BridgeSettings = '''# Generated by MosquittoBridgeRegistrator. Any changes will be overwritten on service start.
connection vrm
address {3}:8883
cleansession true
topic N/{0}/# out
topic R/{0}/# in
topic W/{0}/# in
topic P/{0}/in/# in
topic P/{0}/out/# out
remote_clientid {2}
remote_username {5}
remote_password {1}
bridge_cafile {4}
'''
LockFilePath = "/run/mosquittobridgeregistrator.lock"

def get_random_string(size=32):
	'''Creates a random (hex) string which contains 'size' characters.'''
	return ''.join("{0:02x}".format(ord(b)) for b in open('/dev/urandom', 'rb').read(size/2))

class MosquittoBridgeRegistrator(object):
	"""
	The MosquittoBridgeRegistrator manages a bridge connection between the local Mosquitto
	MQTT server, and the global mqtt.victronenergy.com. It can be called
	concurrently by different processes; efforts will be synchronized using an
	advisory lock file.
	"""

	def __init__(self, system_id):
		self._init_broker_timer = None
		self._client_id = None
		self._system_id = system_id

	def register(self):
		if self._init_broker_timer != None:
			return
		if self._init_broker():
			self._init_broker_timer = gobject.timeout_add_seconds(60, exit_on_error, self._init_broker)

	@property
	def client_id(self):
		return self._client_id

	def _init_broker(self):
		try:
			with open(LockFilePath, "a") as lockFile:
				fcntl.flock(lockFile, fcntl.LOCK_EX)

				restart_broker = False
				password = None
				orig_config = None
				# Read the current config file (if present)
				try:
					logging.info('[InitBroker] Reading config file')
					with open(BridgeConfigPath, 'rt') as in_file:
						orig_config = in_file.read()
					settings = dict(tuple(l.strip().split(' ', 1)) for l in orig_config.split('\n') if not l.startswith('#') and l.strip() != '')
					self._client_id = settings.get('remote_clientid')
					password = settings.get('remote_password')
				except IOError:
					logging.info('[InitBroker] Reading config file failed.')
				# Fix items missing from config
				if self._client_id == None:
					self._client_id = 'ccgx_' + get_random_string(12)
				if password == None:
					password = get_random_string(32)
				# Get to the actual registration
				logging.info('[InitBroker] Registering CCGX at VRM portal')
				with requests.Session() as session:
					headers = {'content-type': 'application/x-www-form-urlencoded', 'User-Agent': 'dbus-mqtt'}
					identifier = 'ccgxapikey_' + self._system_id
					r = session.post(
						VrmApiServer + '/log/storemqttpassword.php',
						data=dict(identifier=identifier, mqttPassword=password),
						headers=headers,
						verify=CaBundlePath)
					if r.status_code == requests.codes.ok:
						config = BridgeSettings.format(self._system_id, password, self._client_id, VrmBroker, \
							CaBundlePath, identifier)
						# Do we need to adjust the settings file?
						if config != orig_config:
							logging.info('[InitBroker] Writing new config file')
							config_dir = os.path.dirname(BridgeConfigPath)
							if not os.path.exists(config_dir):
								os.makedirs(config_dir)
							with open(BridgeConfigPath, 'wt') as out_file:
								out_file.write(config)
							self._restart_broker()
						self._init_broker_timer = None
						return False
					logging.error('VRM registration failed. Http status was: {}'.format(r.status_code))
					logging.error('Message was: {}'.format(r.text))
		except:
			traceback.print_exc()
		# Notify the timer we want to be called again
		return True

	def _restart_broker(self):
		logging.info('Restarting broker')
		subprocess.call(['svc', '-t', '/service/mosquitto'])

# vim: noexpandtab:shiftwidth=4:tabstop=4:softtabstop=0
